NOW(): Normal Operations
========================
test now
    rmain
    delay
    get now
    delay
    get now


SCHEDULING: Normal Operations
=============================
Create system task
    two system tasks?   

Create round robin task
    no failures

Create periodic task
    no failures
    period task happens

Create system/periodic and rr
    trace should be system, rr, system rr

Create periodic schedule
    1) single periodic task
    2) two period task
    3) 3+ tasks


SCHEDULING: Error Conditions
=============================
Create too many tasks

Create invalid schedule    
    1) start time less than now
    2) wcet > period
    3) two periods overlap


PUBLISH & SUBSCRIBE: Normal Operations
======================================
Create service from system
Create service from periodic
Create service from rr

Publish service from system
Publish service from periodic
Publish service from rr
Publish service from interrupt?
    are interrupts tied to a a task?

sub from system
    Create a system A
    Create a system B
    Create a periodic c
    A creates a service s
    A subs to s
    B subs to s
    C publishes to service s
    A wakes up and consumes the service
    B wakes up and consumes the service

sub from rr
    r_main creates a service s
    Create rr task A
    Create rr task B
    Create periodic task C
    A subs to service s
    B subs to service s
    C happens an publishes to s
    A wakes consumes s
    B wakes consumes s
    

PUBLISH & SUBSCRIBE: Error Conditions
======================================
Periodic task subscribes to a service
    Should fail




things that i want to fix
1. Periodic_Task array, refactor into a queue.
2. remove the wcet_counter variable from the task_descriptor_t struct
    we only need a wcet_counted  and recorded_wcet_counted
    when we dequeue from the periodic_queue we set the wcet_counted = 0 + recorded_wcet_counted
    recorded_wcet_counted = 0 for most of the time except when we push a periodic
    task to the periodic_queue list due to being prempted from a system task.
    We do this in order to record the amount of wcet time we may have already accumulated.
    Once the periodic task yields or terminates, we need to set recorded_wcet_counted to 0.
4. Profile the context switching code
    Profile the kernel_update_ticker code
    Profile the Now function.