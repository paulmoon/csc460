
RoombaVer3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001128  000011bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a46  00800210  00800210  000011cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bc8  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c51  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001987  00000000  00000000  00004c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000658  00000000  00000000  00006604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011fa  00000000  00000000  00006c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018eb  00000000  00000000  00007e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  00009741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c1       	rjmp	.+738    	; 0x2f8 <__vector_5>
      16:	00 00       	nop
      18:	8e c0       	rjmp	.+284    	; 0x136 <__vector_6>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c4       	rjmp	.+2056   	; 0x84e <__vector_17>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_36>
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5c 08       	sbc	r5, r12
      e6:	d1 06       	cpc	r13, r17
      e8:	09 07       	cpc	r16, r25
      ea:	5d 07       	cpc	r21, r29
      ec:	83 07       	cpc	r24, r19
      ee:	5c 08       	sbc	r5, r12
      f0:	a9 07       	cpc	r26, r25
      f2:	bf 07       	cpc	r27, r31
      f4:	e8 07       	cpc	r30, r24

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_copy_data>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	e8 e2       	ldi	r30, 0x28	; 40
     10e:	f1 e1       	ldi	r31, 0x11	; 17
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0b bf       	out	0x3b, r16	; 59
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x14>
     116:	07 90       	elpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 31       	cpi	r26, 0x10	; 16
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x10>

00000120 <__do_clear_bss>:
     120:	2c e0       	ldi	r18, 0x0C	; 12
     122:	a0 e1       	ldi	r26, 0x10	; 16
     124:	b2 e0       	ldi	r27, 0x02	; 2
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a6 35       	cpi	r26, 0x56	; 86
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	90 d5       	rcall	.+2848   	; 0xc52 <main>
     132:	f8 c7       	rjmp	.+4080   	; 0x1124 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <__vector_6>:
// 	EICRB |=
}


//Receiving a signal.
ISR(INT5_vect) {
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	0b b6       	in	r0, 0x3b	; 59
     142:	0f 92       	push	r0
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
     148:	ef 93       	push	r30
     14a:	ff 93       	push	r31
	if(!is_receiving) {
     14c:	80 91 12 02 	lds	r24, 0x0212
     150:	81 11       	cpse	r24, r1
     152:	17 c0       	rjmp	.+46     	; 0x182 <__vector_6+0x4c>
		//Start a new byte, start the timers.
		is_receiving = 1;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 12 02 	sts	0x0212, r24
		currentBit = 0;
     15a:	10 92 11 02 	sts	0x0211, r1
		currentByte = 0;
     15e:	10 92 10 02 	sts	0x0210, r1
		//Clear any existing timer interrupts.
		TIFR1 |= (1<<OCF1A);
     162:	b1 9a       	sbi	0x16, 1	; 22
		//Delay by 1.5 bit lengths.
		OCR1A = TCNT1 + 12000;
     164:	80 91 84 00 	lds	r24, 0x0084
     168:	90 91 85 00 	lds	r25, 0x0085
     16c:	80 52       	subi	r24, 0x20	; 32
     16e:	91 4d       	sbci	r25, 0xD1	; 209
     170:	90 93 89 00 	sts	0x0089, r25
     174:	80 93 88 00 	sts	0x0088, r24
		TIMSK1 |= (1<<OCIE1A);
     178:	ef e6       	ldi	r30, 0x6F	; 111
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	80 81       	ld	r24, Z
     17e:	82 60       	ori	r24, 0x02	; 2
     180:	80 83       	st	Z, r24
	}
}
     182:	ff 91       	pop	r31
     184:	ef 91       	pop	r30
     186:	9f 91       	pop	r25
     188:	8f 91       	pop	r24
     18a:	0f 90       	pop	r0
     18c:	0b be       	out	0x3b, r0	; 59
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <get_status>:
}

void Radio_Flush()
{
	send_instruction(FLUSH_TX, NULL, NULL, 0);
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	c2 e0       	ldi	r28, 0x02	; 2
     19e:	d1 e0       	ldi	r29, 0x01	; 1
     1a0:	88 81       	ld	r24, Y
     1a2:	8f 7b       	andi	r24, 0xBF	; 191
     1a4:	88 83       	st	Y, r24
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	4d d1       	rcall	.+666    	; 0x444 <SPI_Write_Byte>
     1aa:	98 81       	ld	r25, Y
     1ac:	90 64       	ori	r25, 0x40	; 64
     1ae:	98 83       	st	Y, r25
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <set_register>:
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	8b 01       	movw	r16, r22
     1c4:	e4 2e       	mov	r14, r20
     1c6:	c2 e0       	ldi	r28, 0x02	; 2
     1c8:	d1 e0       	ldi	r29, 0x01	; 1
     1ca:	98 81       	ld	r25, Y
     1cc:	9f 7b       	andi	r25, 0xBF	; 191
     1ce:	98 83       	st	Y, r25
     1d0:	8f 71       	andi	r24, 0x1F	; 31
     1d2:	80 62       	ori	r24, 0x20	; 32
     1d4:	37 d1       	rcall	.+622    	; 0x444 <SPI_Write_Byte>
     1d6:	f8 2e       	mov	r15, r24
     1d8:	6e 2d       	mov	r22, r14
     1da:	c8 01       	movw	r24, r16
     1dc:	24 d1       	rcall	.+584    	; 0x426 <SPI_Write_Block>
     1de:	88 81       	ld	r24, Y
     1e0:	80 64       	ori	r24, 0x40	; 64
     1e2:	88 83       	st	Y, r24
     1e4:	8f 2d       	mov	r24, r15
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	08 95       	ret

000001f4 <reset_pipe0_address>:
     1f4:	80 91 08 02 	lds	r24, 0x0208
     1f8:	88 23       	and	r24, r24
     1fa:	29 f0       	breq	.+10     	; 0x206 <reset_pipe0_address+0x12>
     1fc:	45 e0       	ldi	r20, 0x05	; 5
     1fe:	63 e0       	ldi	r22, 0x03	; 3
     200:	72 e0       	ldi	r23, 0x02	; 2
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	d8 cf       	rjmp	.-80     	; 0x1b6 <set_register>
     206:	08 95       	ret

00000208 <send_instruction>:
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	8b 01       	movw	r16, r22
     214:	ea 01       	movw	r28, r20
     216:	f2 2e       	mov	r15, r18
     218:	e2 e0       	ldi	r30, 0x02	; 2
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	90 81       	ld	r25, Z
     21e:	9f 7b       	andi	r25, 0xBF	; 191
     220:	90 83       	st	Z, r25
     222:	10 d1       	rcall	.+544    	; 0x444 <SPI_Write_Byte>
     224:	ff 20       	and	r15, r15
     226:	51 f0       	breq	.+20     	; 0x23c <send_instruction+0x34>
     228:	20 97       	sbiw	r28, 0x00	; 0
     22a:	21 f4       	brne	.+8      	; 0x234 <send_instruction+0x2c>
     22c:	6f 2d       	mov	r22, r15
     22e:	c8 01       	movw	r24, r16
     230:	fa d0       	rcall	.+500    	; 0x426 <SPI_Write_Block>
     232:	04 c0       	rjmp	.+8      	; 0x23c <send_instruction+0x34>
     234:	4f 2d       	mov	r20, r15
     236:	be 01       	movw	r22, r28
     238:	c8 01       	movw	r24, r16
     23a:	e2 d0       	rcall	.+452    	; 0x400 <SPI_ReadWrite_Block>
     23c:	e2 e0       	ldi	r30, 0x02	; 2
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	80 81       	ld	r24, Z
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 83       	st	Z, r24
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	08 95       	ret

00000252 <get_register>:
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	06 2f       	mov	r16, r22
     260:	f7 2e       	mov	r15, r23
     262:	14 2f       	mov	r17, r20
     264:	44 23       	and	r20, r20
     266:	49 f0       	breq	.+18     	; 0x27a <get_register+0x28>
     268:	36 2f       	mov	r19, r22
     26a:	e6 2f       	mov	r30, r22
     26c:	f7 2f       	mov	r31, r23
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	21 93       	st	Z+, r18
     272:	9e 2f       	mov	r25, r30
     274:	93 1b       	sub	r25, r19
     276:	91 17       	cp	r25, r17
     278:	d8 f3       	brcs	.-10     	; 0x270 <get_register+0x1e>
     27a:	c2 e0       	ldi	r28, 0x02	; 2
     27c:	d1 e0       	ldi	r29, 0x01	; 1
     27e:	98 81       	ld	r25, Y
     280:	9f 7b       	andi	r25, 0xBF	; 191
     282:	98 83       	st	Y, r25
     284:	8f 71       	andi	r24, 0x1F	; 31
     286:	de d0       	rcall	.+444    	; 0x444 <SPI_Write_Byte>
     288:	e8 2e       	mov	r14, r24
     28a:	41 2f       	mov	r20, r17
     28c:	60 2f       	mov	r22, r16
     28e:	7f 2d       	mov	r23, r15
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	b5 d0       	rcall	.+362    	; 0x400 <SPI_ReadWrite_Block>
     296:	88 81       	ld	r24, Y
     298:	80 64       	ori	r24, 0x40	; 64
     29a:	88 83       	st	Y, r24
     29c:	8e 2d       	mov	r24, r14
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	08 95       	ret

000002ac <set_rx_mode>:
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	1f 92       	push	r1
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	be 01       	movw	r22, r28
     2ba:	6f 5f       	subi	r22, 0xFF	; 255
     2bc:	7f 4f       	sbci	r23, 0xFF	; 255
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	c8 df       	rcall	.-112    	; 0x252 <get_register>
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	80 fd       	sbrc	r24, 0
     2c6:	14 c0       	rjmp	.+40     	; 0x2f0 <set_rx_mode+0x44>
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	be 01       	movw	r22, r28
     2d0:	6f 5f       	subi	r22, 0xFF	; 255
     2d2:	7f 4f       	sbci	r23, 0xFF	; 255
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	6f df       	rcall	.-290    	; 0x1b6 <set_register>
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <set_rx_mode+0x30>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <set_rx_mode+0x36>
     2e2:	00 00       	nop
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <set_rx_mode+0x3c>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <set_rx_mode+0x42>
     2ee:	00 00       	nop
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <__vector_5>:
}


// Interrupt handler
ISR(INT4_vect)
{
     2f8:	1f 92       	push	r1
     2fa:	0f 92       	push	r0
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	0f 92       	push	r0
     300:	11 24       	eor	r1, r1
     302:	0b b6       	in	r0, 0x3b	; 59
     304:	0f 92       	push	r0
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

	DEBUG_2_LOW;
     328:	e2 e0       	ldi	r30, 0x02	; 2
     32a:	f1 e0       	ldi	r31, 0x01	; 1
     32c:	80 81       	ld	r24, Z
     32e:	8f 7e       	andi	r24, 0xEF	; 239
     330:	80 83       	st	Z, r24
    CE_LOW();
     332:	80 81       	ld	r24, Z
     334:	8f 7d       	andi	r24, 0xDF	; 223
     336:	80 83       	st	Z, r24

    status = get_status();
     338:	2f df       	rcall	.-418    	; 0x198 <get_status>
     33a:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR))
     33c:	86 ff       	sbrs	r24, 6
     33e:	03 c0       	rjmp	.+6      	; 0x346 <__vector_5+0x4e>
    {
    	pipe_number =  (status & 0xE) >> 1;
     340:	8e 70       	andi	r24, 0x0E	; 14
    	radio_rxhandler(pipe_number);
     342:	86 95       	lsr	r24
     344:	85 d0       	rcall	.+266    	; 0x450 <radio_rxhandler>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	85 ff       	sbrs	r24, 5
     34a:	1b c0       	rjmp	.+54     	; 0x382 <__vector_5+0x8a>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
     34c:	10 92 13 02 	sts	0x0213, r1
        reset_pipe0_address();
     350:	51 df       	rcall	.-350    	; 0x1f4 <reset_pipe0_address>
        set_rx_mode();
     352:	ac df       	rcall	.-168    	; 0x2ac <set_rx_mode>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
     354:	80 91 01 02 	lds	r24, 0x0201
     358:	90 91 02 02 	lds	r25, 0x0202
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	90 93 02 02 	sts	0x0202, r25
     364:	80 93 01 02 	sts	0x0201, r24
    	tx_history |= 1;
     368:	80 91 01 02 	lds	r24, 0x0201
     36c:	90 91 02 02 	lds	r25, 0x0202
     370:	81 60       	ori	r24, 0x01	; 1
     372:	90 93 02 02 	sts	0x0202, r25
     376:	80 93 01 02 	sts	0x0201, r24

    	tx_last_status = RADIO_TX_SUCCESS;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 00 02 	sts	0x0200, r24
     380:	19 c0       	rjmp	.+50     	; 0x3b4 <__vector_5+0xbc>
    }
    else if (status & _BV(MAX_RT))
     382:	84 ff       	sbrs	r24, 4
     384:	17 c0       	rjmp	.+46     	; 0x3b4 <__vector_5+0xbc>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	81 ee       	ldi	r24, 0xE1	; 225
     392:	3a df       	rcall	.-396    	; 0x208 <send_instruction>

    	transmit_lock = 0;
     394:	10 92 13 02 	sts	0x0213, r1
    	reset_pipe0_address();
     398:	2d df       	rcall	.-422    	; 0x1f4 <reset_pipe0_address>
		set_rx_mode();
     39a:	88 df       	rcall	.-240    	; 0x2ac <set_rx_mode>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
     39c:	80 91 01 02 	lds	r24, 0x0201
     3a0:	90 91 02 02 	lds	r25, 0x0202
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	90 93 02 02 	sts	0x0202, r25
     3ac:	80 93 01 02 	sts	0x0201, r24

    	tx_last_status = RADIO_TX_MAX_RT;
     3b0:	10 92 00 02 	sts	0x0200, r1
    }
	
    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     3b4:	80 e7       	ldi	r24, 0x70	; 112
     3b6:	89 83       	std	Y+1, r24	; 0x01
	set_register(STATUS, &status, 1);
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	be 01       	movw	r22, r28
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	f9 de       	rcall	.-526    	; 0x1b6 <set_register>
	DEBUG_2_HIGH;
     3c4:	e2 e0       	ldi	r30, 0x02	; 2
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	80 81       	ld	r24, Z
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	80 83       	st	Z, r24
	
    CE_HIGH();
     3ce:	80 81       	ld	r24, Z
     3d0:	80 62       	ori	r24, 0x20	; 32
     3d2:	80 83       	st	Z, r24
}
     3d4:	0f 90       	pop	r0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	ff 91       	pop	r31
     3dc:	ef 91       	pop	r30
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	0b be       	out	0x3b, r0	; 59
     3f6:	0f 90       	pop	r0
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	0f 90       	pop	r0
     3fc:	1f 90       	pop	r1
     3fe:	18 95       	reti

00000400 <SPI_ReadWrite_Block>:
     400:	44 23       	and	r20, r20
     402:	81 f0       	breq	.+32     	; 0x424 <SPI_ReadWrite_Block+0x24>
     404:	28 2f       	mov	r18, r24
     406:	a6 2f       	mov	r26, r22
     408:	b7 2f       	mov	r27, r23
     40a:	e8 2f       	mov	r30, r24
     40c:	f9 2f       	mov	r31, r25
     40e:	81 91       	ld	r24, Z+
     410:	8e bd       	out	0x2e, r24	; 46
     412:	0d b4       	in	r0, 0x2d	; 45
     414:	07 fe       	sbrs	r0, 7
     416:	fd cf       	rjmp	.-6      	; 0x412 <SPI_ReadWrite_Block+0x12>
     418:	8e b5       	in	r24, 0x2e	; 46
     41a:	8d 93       	st	X+, r24
     41c:	8e 2f       	mov	r24, r30
     41e:	82 1b       	sub	r24, r18
     420:	84 17       	cp	r24, r20
     422:	a8 f3       	brcs	.-22     	; 0x40e <SPI_ReadWrite_Block+0xe>
     424:	08 95       	ret

00000426 <SPI_Write_Block>:
     426:	66 23       	and	r22, r22
     428:	61 f0       	breq	.+24     	; 0x442 <SPI_Write_Block+0x1c>
     42a:	28 2f       	mov	r18, r24
     42c:	e8 2f       	mov	r30, r24
     42e:	f9 2f       	mov	r31, r25
     430:	81 91       	ld	r24, Z+
     432:	8e bd       	out	0x2e, r24	; 46
     434:	0d b4       	in	r0, 0x2d	; 45
     436:	07 fe       	sbrs	r0, 7
     438:	fd cf       	rjmp	.-6      	; 0x434 <SPI_Write_Block+0xe>
     43a:	8e 2f       	mov	r24, r30
     43c:	82 1b       	sub	r24, r18
     43e:	86 17       	cp	r24, r22
     440:	b8 f3       	brcs	.-18     	; 0x430 <SPI_Write_Block+0xa>
     442:	08 95       	ret

00000444 <SPI_Write_Byte>:
     444:	8e bd       	out	0x2e, r24	; 46
     446:	0d b4       	in	r0, 0x2d	; 45
     448:	07 fe       	sbrs	r0, 7
     44a:	fd cf       	rjmp	.-6      	; 0x446 <SPI_Write_Byte+0x2>
     44c:	8e b5       	in	r24, 0x2e	; 46
     44e:	08 95       	ret

00000450 <radio_rxhandler>:
	// ir_receive_event = Event_Init();
	// Task_Create_RR(rr_roomba_controler,0);
 // 	Task_Create_Period(per_roomba_timeout,0,10,9,0);
// }

void radio_rxhandler(uint8_t pipernumber){}
     450:	08 95       	ret

00000452 <r_main>:



int r_main(void)
{
	EnableProfileSample1();
     452:	40 9a       	sbi	0x08, 0	; 8
	DisableProfileSample1();
     454:	40 98       	cbi	0x08, 0	; 8
     456:	08 95       	ret

00000458 <idle>:

uint16_t Now()
{
//    return ticks_from_start * TICK + (TCNT1 + HALF_MS) / (CYCLES_PER_MS)
    return ticks_from_start * TICK + ((TCNT1 - current_timer_val)/(F_CPU/TIMER_PRESCALER/1000)); 
}
     458:	ff cf       	rjmp	.-2      	; 0x458 <idle>

0000045a <exit_kernel>:
     45a:	ff 93       	push	r31
     45c:	fc b7       	in	r31, 0x3c	; 60
     45e:	ff 93       	push	r31
     460:	ff b7       	in	r31, 0x3f	; 63
     462:	f8 94       	cli
     464:	ff 93       	push	r31
     466:	ef 93       	push	r30
     468:	df 93       	push	r29
     46a:	cf 93       	push	r28
     46c:	bf 93       	push	r27
     46e:	af 93       	push	r26
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	7f 93       	push	r23
     476:	6f 93       	push	r22
     478:	5f 93       	push	r21
     47a:	4f 93       	push	r20
     47c:	3f 93       	push	r19
     47e:	2f 93       	push	r18
     480:	1f 93       	push	r17
     482:	0f 93       	push	r16
     484:	ff 92       	push	r15
     486:	ef 92       	push	r14
     488:	df 92       	push	r13
     48a:	cf 92       	push	r12
     48c:	bf 92       	push	r11
     48e:	af 92       	push	r10
     490:	9f 92       	push	r9
     492:	8f 92       	push	r8
     494:	7f 92       	push	r7
     496:	6f 92       	push	r6
     498:	5f 92       	push	r5
     49a:	4f 92       	push	r4
     49c:	3f 92       	push	r3
     49e:	2f 92       	push	r2
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	8d b7       	in	r24, 0x3d	; 61
     4a6:	9e b7       	in	r25, 0x3e	; 62
     4a8:	90 93 2e 0c 	sts	0x0C2E, r25
     4ac:	80 93 2d 0c 	sts	0x0C2D, r24
     4b0:	e0 91 33 0c 	lds	r30, 0x0C33
     4b4:	f0 91 34 0c 	lds	r31, 0x0C34
     4b8:	f3 95       	inc	r31
     4ba:	80 81       	ld	r24, Z
     4bc:	91 81       	ldd	r25, Z+1	; 0x01
     4be:	9e bf       	out	0x3e, r25	; 62
     4c0:	8d bf       	out	0x3d, r24	; 61
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	2f 90       	pop	r2
     4c8:	3f 90       	pop	r3
     4ca:	4f 90       	pop	r4
     4cc:	5f 90       	pop	r5
     4ce:	6f 90       	pop	r6
     4d0:	7f 90       	pop	r7
     4d2:	8f 90       	pop	r8
     4d4:	9f 90       	pop	r9
     4d6:	af 90       	pop	r10
     4d8:	bf 90       	pop	r11
     4da:	cf 90       	pop	r12
     4dc:	df 90       	pop	r13
     4de:	ef 90       	pop	r14
     4e0:	ff 90       	pop	r15
     4e2:	0f 91       	pop	r16
     4e4:	1f 91       	pop	r17
     4e6:	2f 91       	pop	r18
     4e8:	3f 91       	pop	r19
     4ea:	4f 91       	pop	r20
     4ec:	5f 91       	pop	r21
     4ee:	6f 91       	pop	r22
     4f0:	7f 91       	pop	r23
     4f2:	8f 91       	pop	r24
     4f4:	9f 91       	pop	r25
     4f6:	af 91       	pop	r26
     4f8:	bf 91       	pop	r27
     4fa:	cf 91       	pop	r28
     4fc:	df 91       	pop	r29
     4fe:	ef 91       	pop	r30
     500:	ff 91       	pop	r31
     502:	ff bf       	out	0x3f, r31	; 63
     504:	ff 91       	pop	r31
     506:	fc bf       	out	0x3c, r31	; 60
     508:	ff 91       	pop	r31
     50a:	08 95       	ret

0000050c <enter_kernel>:
     50c:	ff 93       	push	r31
     50e:	fc b7       	in	r31, 0x3c	; 60
     510:	ff 93       	push	r31
     512:	ff b7       	in	r31, 0x3f	; 63
     514:	f8 94       	cli
     516:	ff 93       	push	r31
     518:	ef 93       	push	r30
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	bf 93       	push	r27
     520:	af 93       	push	r26
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	7f 93       	push	r23
     528:	6f 93       	push	r22
     52a:	5f 93       	push	r21
     52c:	4f 93       	push	r20
     52e:	3f 93       	push	r19
     530:	2f 93       	push	r18
     532:	1f 93       	push	r17
     534:	0f 93       	push	r16
     536:	ff 92       	push	r15
     538:	ef 92       	push	r14
     53a:	df 92       	push	r13
     53c:	cf 92       	push	r12
     53e:	bf 92       	push	r11
     540:	af 92       	push	r10
     542:	9f 92       	push	r9
     544:	8f 92       	push	r8
     546:	7f 92       	push	r7
     548:	6f 92       	push	r6
     54a:	5f 92       	push	r5
     54c:	4f 92       	push	r4
     54e:	3f 92       	push	r3
     550:	2f 92       	push	r2
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	e0 91 33 0c 	lds	r30, 0x0C33
     55a:	f0 91 34 0c 	lds	r31, 0x0C34
     55e:	8d b7       	in	r24, 0x3d	; 61
     560:	9e b7       	in	r25, 0x3e	; 62
     562:	f3 95       	inc	r31
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	80 83       	st	Z, r24
     568:	80 91 2d 0c 	lds	r24, 0x0C2D
     56c:	90 91 2e 0c 	lds	r25, 0x0C2E
     570:	9e bf       	out	0x3e, r25	; 62
     572:	8d bf       	out	0x3d, r24	; 61
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	2f 90       	pop	r2
     57a:	3f 90       	pop	r3
     57c:	4f 90       	pop	r4
     57e:	5f 90       	pop	r5
     580:	6f 90       	pop	r6
     582:	7f 90       	pop	r7
     584:	8f 90       	pop	r8
     586:	9f 90       	pop	r9
     588:	af 90       	pop	r10
     58a:	bf 90       	pop	r11
     58c:	cf 90       	pop	r12
     58e:	df 90       	pop	r13
     590:	ef 90       	pop	r14
     592:	ff 90       	pop	r15
     594:	0f 91       	pop	r16
     596:	1f 91       	pop	r17
     598:	2f 91       	pop	r18
     59a:	3f 91       	pop	r19
     59c:	4f 91       	pop	r20
     59e:	5f 91       	pop	r21
     5a0:	6f 91       	pop	r22
     5a2:	7f 91       	pop	r23
     5a4:	8f 91       	pop	r24
     5a6:	9f 91       	pop	r25
     5a8:	af 91       	pop	r26
     5aa:	bf 91       	pop	r27
     5ac:	cf 91       	pop	r28
     5ae:	df 91       	pop	r29
     5b0:	ef 91       	pop	r30
     5b2:	ff 91       	pop	r31
     5b4:	ff bf       	out	0x3f, r31	; 63
     5b6:	ff 91       	pop	r31
     5b8:	fc bf       	out	0x3c, r31	; 60
     5ba:	ff 91       	pop	r31
     5bc:	08 95       	ret

000005be <periodic_enqueue>:
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	fc 01       	movw	r30, r24
     5c8:	a0 81       	ld	r26, Z
     5ca:	b1 81       	ldd	r27, Z+1	; 0x01
     5cc:	10 97       	sbiw	r26, 0x00	; 0
     5ce:	c1 f0       	breq	.+48     	; 0x600 <periodic_enqueue+0x42>
     5d0:	fb 01       	movw	r30, r22
     5d2:	06 81       	ldd	r16, Z+6	; 0x06
     5d4:	17 81       	ldd	r17, Z+7	; 0x07
     5d6:	20 91 16 02 	lds	r18, 0x0216
     5da:	30 91 17 02 	lds	r19, 0x0217
     5de:	e0 91 16 02 	lds	r30, 0x0216
     5e2:	f0 91 17 02 	lds	r31, 0x0217
     5e6:	a8 01       	movw	r20, r16
     5e8:	42 1b       	sub	r20, r18
     5ea:	53 0b       	sbc	r21, r19
     5ec:	16 96       	adiw	r26, 0x06	; 6
     5ee:	2d 91       	ld	r18, X+
     5f0:	3c 91       	ld	r19, X
     5f2:	17 97       	sbiw	r26, 0x07	; 7
     5f4:	2e 1b       	sub	r18, r30
     5f6:	3f 0b       	sbc	r19, r31
     5f8:	42 17       	cp	r20, r18
     5fa:	53 07       	cpc	r21, r19
     5fc:	78 f5       	brcc	.+94     	; 0x65c <periodic_enqueue+0x9e>
     5fe:	24 c0       	rjmp	.+72     	; 0x648 <periodic_enqueue+0x8a>
     600:	71 83       	std	Z+1, r23	; 0x01
     602:	60 83       	st	Z, r22
     604:	73 83       	std	Z+3, r23	; 0x03
     606:	62 83       	std	Z+2, r22	; 0x02
     608:	fb 01       	movw	r30, r22
     60a:	11 86       	std	Z+9, r1	; 0x09
     60c:	10 86       	std	Z+8, r1	; 0x08
     60e:	3a c0       	rjmp	.+116    	; 0x684 <periodic_enqueue+0xc6>
     610:	20 91 16 02 	lds	r18, 0x0216
     614:	30 91 17 02 	lds	r19, 0x0217
     618:	c0 91 16 02 	lds	r28, 0x0216
     61c:	d0 91 17 02 	lds	r29, 0x0217
     620:	a8 01       	movw	r20, r16
     622:	42 1b       	sub	r20, r18
     624:	53 0b       	sbc	r21, r19
     626:	26 81       	ldd	r18, Z+6	; 0x06
     628:	37 81       	ldd	r19, Z+7	; 0x07
     62a:	2c 1b       	sub	r18, r28
     62c:	3d 0b       	sbc	r19, r29
     62e:	42 17       	cp	r20, r18
     630:	53 07       	cpc	r21, r19
     632:	10 f0       	brcs	.+4      	; 0x638 <periodic_enqueue+0x7a>
     634:	df 01       	movw	r26, r30
     636:	12 c0       	rjmp	.+36     	; 0x65c <periodic_enqueue+0x9e>
     638:	10 97       	sbiw	r26, 0x00	; 0
     63a:	29 f0       	breq	.+10     	; 0x646 <periodic_enqueue+0x88>
     63c:	19 96       	adiw	r26, 0x09	; 9
     63e:	7c 93       	st	X, r23
     640:	6e 93       	st	-X, r22
     642:	18 97       	sbiw	r26, 0x08	; 8
     644:	05 c0       	rjmp	.+10     	; 0x650 <periodic_enqueue+0x92>
     646:	df 01       	movw	r26, r30
     648:	fc 01       	movw	r30, r24
     64a:	71 83       	std	Z+1, r23	; 0x01
     64c:	60 83       	st	Z, r22
     64e:	fd 01       	movw	r30, r26
     650:	db 01       	movw	r26, r22
     652:	19 96       	adiw	r26, 0x09	; 9
     654:	fc 93       	st	X, r31
     656:	ee 93       	st	-X, r30
     658:	18 97       	sbiw	r26, 0x08	; 8
     65a:	14 c0       	rjmp	.+40     	; 0x684 <periodic_enqueue+0xc6>
     65c:	18 96       	adiw	r26, 0x08	; 8
     65e:	ed 91       	ld	r30, X+
     660:	fc 91       	ld	r31, X
     662:	19 97       	sbiw	r26, 0x09	; 9
     664:	30 97       	sbiw	r30, 0x00	; 0
     666:	a1 f6       	brne	.-88     	; 0x610 <periodic_enqueue+0x52>
     668:	dc 01       	movw	r26, r24
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	ed 91       	ld	r30, X+
     66e:	fc 91       	ld	r31, X
     670:	13 97       	sbiw	r26, 0x03	; 3
     672:	71 87       	std	Z+9, r23	; 0x09
     674:	60 87       	std	Z+8, r22	; 0x08
     676:	13 96       	adiw	r26, 0x03	; 3
     678:	7c 93       	st	X, r23
     67a:	6e 93       	st	-X, r22
     67c:	12 97       	sbiw	r26, 0x02	; 2
     67e:	fb 01       	movw	r30, r22
     680:	11 86       	std	Z+9, r1	; 0x09
     682:	10 86       	std	Z+8, r1	; 0x08
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <enqueue>:
     68e:	fc 01       	movw	r30, r24
     690:	80 81       	ld	r24, Z
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	89 2b       	or	r24, r25
     696:	29 f4       	brne	.+10     	; 0x6a2 <enqueue+0x14>
     698:	71 83       	std	Z+1, r23	; 0x01
     69a:	60 83       	st	Z, r22
     69c:	73 83       	std	Z+3, r23	; 0x03
     69e:	62 83       	std	Z+2, r22	; 0x02
     6a0:	08 95       	ret
     6a2:	a2 81       	ldd	r26, Z+2	; 0x02
     6a4:	b3 81       	ldd	r27, Z+3	; 0x03
     6a6:	a6 5f       	subi	r26, 0xF6	; 246
     6a8:	be 4f       	sbci	r27, 0xFE	; 254
     6aa:	6d 93       	st	X+, r22
     6ac:	7c 93       	st	X, r23
     6ae:	73 83       	std	Z+3, r23	; 0x03
     6b0:	62 83       	std	Z+2, r22	; 0x02
     6b2:	08 95       	ret

000006b4 <dequeue>:
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	00 97       	sbiw	r24, 0x00	; 0
     6bc:	89 f0       	breq	.+34     	; 0x6e0 <dequeue+0x2c>
     6be:	22 81       	ldd	r18, Z+2	; 0x02
     6c0:	33 81       	ldd	r19, Z+3	; 0x03
     6c2:	82 17       	cp	r24, r18
     6c4:	93 07       	cpc	r25, r19
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <dequeue+0x1e>
     6c8:	13 82       	std	Z+3, r1	; 0x03
     6ca:	12 82       	std	Z+2, r1	; 0x02
     6cc:	11 82       	std	Z+1, r1	; 0x01
     6ce:	10 82       	st	Z, r1
     6d0:	08 95       	ret
     6d2:	dc 01       	movw	r26, r24
     6d4:	a6 5f       	subi	r26, 0xF6	; 246
     6d6:	be 4f       	sbci	r27, 0xFE	; 254
     6d8:	2d 91       	ld	r18, X+
     6da:	3c 91       	ld	r19, X
     6dc:	31 83       	std	Z+1, r19	; 0x01
     6de:	20 83       	st	Z, r18
     6e0:	08 95       	ret

000006e2 <kernel_create_task>:
     6e2:	80 91 79 02 	lds	r24, 0x0279
     6e6:	90 91 7a 02 	lds	r25, 0x027A
     6ea:	89 2b       	or	r24, r25
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <kernel_create_task+0xe>
     6ee:	9c c0       	rjmp	.+312    	; 0x828 <kernel_create_task+0x146>
     6f0:	80 91 97 02 	lds	r24, 0x0297
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	39 f4       	brne	.+14     	; 0x706 <kernel_create_task+0x24>
     6f8:	80 91 75 02 	lds	r24, 0x0275
     6fc:	90 91 76 02 	lds	r25, 0x0276
     700:	89 2b       	or	r24, r25
     702:	09 f4       	brne	.+2      	; 0x706 <kernel_create_task+0x24>
     704:	94 c0       	rjmp	.+296    	; 0x82e <kernel_create_task+0x14c>
     706:	80 91 97 02 	lds	r24, 0x0297
     70a:	8f 3f       	cpi	r24, 0xFF	; 255
     70c:	21 f0       	breq	.+8      	; 0x716 <kernel_create_task+0x34>
     70e:	89 e7       	ldi	r24, 0x79	; 121
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	d0 df       	rcall	.-96     	; 0x6b4 <dequeue>
     714:	02 c0       	rjmp	.+4      	; 0x71a <kernel_create_task+0x38>
     716:	81 e2       	ldi	r24, 0x21	; 33
     718:	9b e0       	ldi	r25, 0x0B	; 11
     71a:	fc 01       	movw	r30, r24
     71c:	e7 52       	subi	r30, 0x27	; 39
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	10 82       	st	Z, r1
     722:	20 e8       	ldi	r18, 0x80	; 128
     724:	7e 96       	adiw	r30, 0x1e	; 30
     726:	20 83       	st	Z, r18
     728:	33 96       	adiw	r30, 0x03	; 3
     72a:	10 82       	st	Z, r1
     72c:	e3 e9       	ldi	r30, 0x93	; 147
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	20 81       	ld	r18, Z
     732:	31 81       	ldd	r19, Z+1	; 0x01
     734:	dc 01       	movw	r26, r24
     736:	a5 50       	subi	r26, 0x05	; 5
     738:	bf 4f       	sbci	r27, 0xFF	; 255
     73a:	3c 93       	st	X, r19
     73c:	20 81       	ld	r18, Z
     73e:	31 81       	ldd	r19, Z+1	; 0x01
     740:	fc 01       	movw	r30, r24
     742:	e4 50       	subi	r30, 0x04	; 4
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	20 83       	st	Z, r18
     748:	31 96       	adiw	r30, 0x01	; 1
     74a:	10 82       	st	Z, r1
     74c:	2d e1       	ldi	r18, 0x1D	; 29
     74e:	34 e0       	ldi	r19, 0x04	; 4
     750:	31 96       	adiw	r30, 0x01	; 1
     752:	30 83       	st	Z, r19
     754:	31 96       	adiw	r30, 0x01	; 1
     756:	20 83       	st	Z, r18
     758:	31 96       	adiw	r30, 0x01	; 1
     75a:	9c 01       	movw	r18, r24
     75c:	29 52       	subi	r18, 0x29	; 41
     75e:	3f 4f       	sbci	r19, 0xFF	; 255
     760:	31 83       	std	Z+1, r19	; 0x01
     762:	20 83       	st	Z, r18
     764:	22 e0       	ldi	r18, 0x02	; 2
     766:	35 96       	adiw	r30, 0x05	; 5
     768:	20 83       	st	Z, r18
     76a:	20 91 95 02 	lds	r18, 0x0295
     76e:	30 91 96 02 	lds	r19, 0x0296
     772:	31 96       	adiw	r30, 0x01	; 1
     774:	31 83       	std	Z+1, r19	; 0x01
     776:	20 83       	st	Z, r18
     778:	e7 e9       	ldi	r30, 0x97	; 151
     77a:	f2 e0       	ldi	r31, 0x02	; 2
     77c:	20 81       	ld	r18, Z
     77e:	17 96       	adiw	r26, 0x07	; 7
     780:	2c 93       	st	X, r18
     782:	20 81       	ld	r18, Z
     784:	21 30       	cpi	r18, 0x01	; 1
     786:	31 f0       	breq	.+12     	; 0x794 <kernel_create_task+0xb2>
     788:	22 30       	cpi	r18, 0x02	; 2
     78a:	09 f4       	brne	.+2      	; 0x78e <kernel_create_task+0xac>
     78c:	46 c0       	rjmp	.+140    	; 0x81a <kernel_create_task+0x138>
     78e:	21 11       	cpse	r18, r1
     790:	51 c0       	rjmp	.+162    	; 0x834 <kernel_create_task+0x152>
     792:	3c c0       	rjmp	.+120    	; 0x80c <kernel_create_task+0x12a>
     794:	e0 91 75 02 	lds	r30, 0x0275
     798:	f0 91 76 02 	lds	r31, 0x0276
     79c:	30 97       	sbiw	r30, 0x00	; 0
     79e:	b1 f0       	breq	.+44     	; 0x7cc <kernel_create_task+0xea>
     7a0:	20 91 77 02 	lds	r18, 0x0277
     7a4:	30 91 78 02 	lds	r19, 0x0278
     7a8:	e2 17       	cp	r30, r18
     7aa:	f3 07       	cpc	r31, r19
     7ac:	49 f4       	brne	.+18     	; 0x7c0 <kernel_create_task+0xde>
     7ae:	10 92 78 02 	sts	0x0278, r1
     7b2:	10 92 77 02 	sts	0x0277, r1
     7b6:	10 92 76 02 	sts	0x0276, r1
     7ba:	10 92 75 02 	sts	0x0275, r1
     7be:	06 c0       	rjmp	.+12     	; 0x7cc <kernel_create_task+0xea>
     7c0:	20 85       	ldd	r18, Z+8	; 0x08
     7c2:	31 85       	ldd	r19, Z+9	; 0x09
     7c4:	30 93 76 02 	sts	0x0276, r19
     7c8:	20 93 75 02 	sts	0x0275, r18
     7cc:	20 91 8f 02 	lds	r18, 0x028F
     7d0:	30 91 90 02 	lds	r19, 0x0290
     7d4:	37 83       	std	Z+7, r19	; 0x07
     7d6:	26 83       	std	Z+6, r18	; 0x06
     7d8:	20 91 8b 02 	lds	r18, 0x028B
     7dc:	30 91 8c 02 	lds	r19, 0x028C
     7e0:	33 83       	std	Z+3, r19	; 0x03
     7e2:	22 83       	std	Z+2, r18	; 0x02
     7e4:	20 91 8d 02 	lds	r18, 0x028D
     7e8:	30 91 8e 02 	lds	r19, 0x028E
     7ec:	35 83       	std	Z+5, r19	; 0x05
     7ee:	24 83       	std	Z+4, r18	; 0x04
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	80 83       	st	Z, r24
     7f4:	dc 01       	movw	r26, r24
     7f6:	ad 5f       	subi	r26, 0xFD	; 253
     7f8:	be 4f       	sbci	r27, 0xFE	; 254
     7fa:	ed 93       	st	X+, r30
     7fc:	fc 93       	st	X, r31
     7fe:	bf 01       	movw	r22, r30
     800:	8d e6       	ldi	r24, 0x6D	; 109
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	dc de       	rcall	.-584    	; 0x5be <periodic_enqueue>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	08 95       	ret
     80c:	bc 01       	movw	r22, r24
     80e:	89 e6       	ldi	r24, 0x69	; 105
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	3d df       	rcall	.-390    	; 0x68e <enqueue>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	08 95       	ret
     81a:	bc 01       	movw	r22, r24
     81c:	81 e7       	ldi	r24, 0x71	; 113
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	36 df       	rcall	.-404    	; 0x68e <enqueue>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	08 95       	ret
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	08 95       	ret
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	08 95       	ret
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	08 95       	ret

0000083a <Task_Terminate>:
     83a:	cf 93       	push	r28
     83c:	cf b7       	in	r28, 0x3f	; 63
     83e:	f8 94       	cli
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	80 93 98 02 	sts	0x0298, r24
     846:	62 de       	rcall	.-828    	; 0x50c <enter_kernel>
     848:	cf bf       	out	0x3f, r28	; 63
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <__vector_17>:
     84e:	ff 93       	push	r31
     850:	fc b7       	in	r31, 0x3c	; 60
     852:	ff 93       	push	r31
     854:	ff b7       	in	r31, 0x3f	; 63
     856:	f8 94       	cli
     858:	f0 68       	ori	r31, 0x80	; 128
     85a:	ff 93       	push	r31
     85c:	ef 93       	push	r30
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	bf 93       	push	r27
     864:	af 93       	push	r26
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	7f 93       	push	r23
     86c:	6f 93       	push	r22
     86e:	5f 93       	push	r21
     870:	4f 93       	push	r20
     872:	3f 93       	push	r19
     874:	2f 93       	push	r18
     876:	1f 93       	push	r17
     878:	0f 93       	push	r16
     87a:	ff 92       	push	r15
     87c:	ef 92       	push	r14
     87e:	df 92       	push	r13
     880:	cf 92       	push	r12
     882:	bf 92       	push	r11
     884:	af 92       	push	r10
     886:	9f 92       	push	r9
     888:	8f 92       	push	r8
     88a:	7f 92       	push	r7
     88c:	6f 92       	push	r6
     88e:	5f 92       	push	r5
     890:	4f 92       	push	r4
     892:	3f 92       	push	r3
     894:	2f 92       	push	r2
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	e0 91 33 0c 	lds	r30, 0x0C33
     89e:	f0 91 34 0c 	lds	r31, 0x0C34
     8a2:	8d b7       	in	r24, 0x3d	; 61
     8a4:	9e b7       	in	r25, 0x3e	; 62
     8a6:	f3 95       	inc	r31
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
     8ac:	80 91 2d 0c 	lds	r24, 0x0C2D
     8b0:	90 91 2e 0c 	lds	r25, 0x0C2E
     8b4:	9e bf       	out	0x3e, r25	; 62
     8b6:	8d bf       	out	0x3d, r24	; 61
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 98 02 	sts	0x0298, r24
     8be:	e8 e8       	ldi	r30, 0x88	; 136
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	80 5f       	subi	r24, 0xF0	; 240
     8c8:	98 4d       	sbci	r25, 0xD8	; 216
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
     8ce:	80 91 2d 0c 	lds	r24, 0x0C2D
     8d2:	90 91 2e 0c 	lds	r25, 0x0C2E
     8d6:	9e bf       	out	0x3e, r25	; 62
     8d8:	8d bf       	out	0x3d, r24	; 61
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	2f 90       	pop	r2
     8e0:	3f 90       	pop	r3
     8e2:	4f 90       	pop	r4
     8e4:	5f 90       	pop	r5
     8e6:	6f 90       	pop	r6
     8e8:	7f 90       	pop	r7
     8ea:	8f 90       	pop	r8
     8ec:	9f 90       	pop	r9
     8ee:	af 90       	pop	r10
     8f0:	bf 90       	pop	r11
     8f2:	cf 90       	pop	r12
     8f4:	df 90       	pop	r13
     8f6:	ef 90       	pop	r14
     8f8:	ff 90       	pop	r15
     8fa:	0f 91       	pop	r16
     8fc:	1f 91       	pop	r17
     8fe:	2f 91       	pop	r18
     900:	3f 91       	pop	r19
     902:	4f 91       	pop	r20
     904:	5f 91       	pop	r21
     906:	6f 91       	pop	r22
     908:	7f 91       	pop	r23
     90a:	8f 91       	pop	r24
     90c:	9f 91       	pop	r25
     90e:	af 91       	pop	r26
     910:	bf 91       	pop	r27
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	ef 91       	pop	r30
     918:	ff 91       	pop	r31
     91a:	ff bf       	out	0x3f, r31	; 63
     91c:	ff 91       	pop	r31
     91e:	fc bf       	out	0x3c, r31	; 60
     920:	ff 91       	pop	r31
     922:	08 95       	ret

00000924 <kernel_init>:
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	e1 e8       	ldi	r30, 0x81	; 129
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	82 60       	ori	r24, 0x02	; 2
     93c:	80 83       	st	Z, r24
     93e:	e6 ec       	ldi	r30, 0xC6	; 198
     940:	f3 e0       	ldi	r31, 0x03	; 3
     942:	26 e2       	ldi	r18, 0x26	; 38
     944:	3c e0       	ldi	r19, 0x0C	; 12
     946:	10 82       	st	Z, r1
     948:	cf 01       	movw	r24, r30
     94a:	07 96       	adiw	r24, 0x07	; 7
     94c:	96 83       	std	Z+6, r25	; 0x06
     94e:	85 83       	std	Z+5, r24	; 0x05
     950:	df 01       	movw	r26, r30
     952:	12 97       	sbiw	r26, 0x02	; 2
     954:	1d 92       	st	X+, r1
     956:	1c 92       	st	X, r1
     958:	e4 5f       	subi	r30, 0xF4	; 244
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	e2 17       	cp	r30, r18
     95e:	f3 07       	cpc	r31, r19
     960:	91 f7       	brne	.-28     	; 0x946 <kernel_init+0x22>
     962:	10 92 2c 0c 	sts	0x0C2C, r1
     966:	10 92 2b 0c 	sts	0x0C2B, r1
     96a:	10 92 20 0b 	sts	0x0B20, r1
     96e:	10 92 1f 0b 	sts	0x0B1F, r1
     972:	10 92 26 0c 	sts	0x0C26, r1
     976:	10 92 25 0c 	sts	0x0C25, r1
     97a:	10 92 24 0c 	sts	0x0C24, r1
     97e:	e9 e9       	ldi	r30, 0x99	; 153
     980:	f2 e0       	ldi	r31, 0x02	; 2
     982:	27 eb       	ldi	r18, 0xB7	; 183
     984:	32 e0       	ldi	r19, 0x02	; 2
     986:	17 82       	std	Z+7, r1	; 0x07
     988:	16 82       	std	Z+6, r1	; 0x06
     98a:	15 82       	std	Z+5, r1	; 0x05
     98c:	14 82       	std	Z+4, r1	; 0x04
     98e:	13 82       	std	Z+3, r1	; 0x03
     990:	12 82       	std	Z+2, r1	; 0x02
     992:	11 82       	std	Z+1, r1	; 0x01
     994:	10 82       	st	Z, r1
     996:	cf 01       	movw	r24, r30
     998:	0a 96       	adiw	r24, 0x0a	; 10
     99a:	91 87       	std	Z+9, r25	; 0x09
     99c:	80 87       	std	Z+8, r24	; 0x08
     99e:	82 17       	cp	r24, r18
     9a0:	93 07       	cpc	r25, r19
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <kernel_init+0x84>
     9a4:	fc 01       	movw	r30, r24
     9a6:	ef cf       	rjmp	.-34     	; 0x986 <kernel_init+0x62>
     9a8:	e7 eb       	ldi	r30, 0xB7	; 183
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	11 82       	std	Z+1, r1	; 0x01
     9ae:	10 82       	st	Z, r1
     9b0:	10 92 c0 02 	sts	0x02C0, r1
     9b4:	10 92 bf 02 	sts	0x02BF, r1
     9b8:	10 92 be 02 	sts	0x02BE, r1
     9bc:	10 92 bd 02 	sts	0x02BD, r1
     9c0:	10 92 bc 02 	sts	0x02BC, r1
     9c4:	10 92 bb 02 	sts	0x02BB, r1
     9c8:	10 92 ba 02 	sts	0x02BA, r1
     9cc:	10 92 b9 02 	sts	0x02B9, r1
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f1 ec       	ldi	r31, 0xC1	; 193
     9d4:	cf 2e       	mov	r12, r31
     9d6:	f2 e0       	ldi	r31, 0x02	; 2
     9d8:	df 2e       	mov	r13, r31
     9da:	f0 2d       	mov	r31, r0
     9dc:	d0 92 7a 02 	sts	0x027A, r13
     9e0:	c0 92 79 02 	sts	0x0279, r12
     9e4:	85 e1       	ldi	r24, 0x15	; 21
     9e6:	9a e0       	ldi	r25, 0x0A	; 10
     9e8:	90 93 7c 02 	sts	0x027C, r25
     9ec:	80 93 7b 02 	sts	0x027B, r24
     9f0:	89 e9       	ldi	r24, 0x99	; 153
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	90 93 76 02 	sts	0x0276, r25
     9f8:	80 93 75 02 	sts	0x0275, r24
     9fc:	f0 93 78 02 	sts	0x0278, r31
     a00:	e0 93 77 02 	sts	0x0277, r30
     a04:	10 92 6e 02 	sts	0x026E, r1
     a08:	10 92 6d 02 	sts	0x026D, r1
     a0c:	10 92 70 02 	sts	0x0270, r1
     a10:	10 92 6f 02 	sts	0x026F, r1
     a14:	10 92 72 02 	sts	0x0272, r1
     a18:	10 92 71 02 	sts	0x0271, r1
     a1c:	10 92 74 02 	sts	0x0274, r1
     a20:	10 92 73 02 	sts	0x0273, r1
     a24:	10 92 6a 02 	sts	0x026A, r1
     a28:	10 92 69 02 	sts	0x0269, r1
     a2c:	10 92 6c 02 	sts	0x026C, r1
     a30:	10 92 6b 02 	sts	0x026B, r1
     a34:	0f 2e       	mov	r0, r31
     a36:	f3 e9       	ldi	r31, 0x93	; 147
     a38:	ef 2e       	mov	r14, r31
     a3a:	f2 e0       	ldi	r31, 0x02	; 2
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
     a40:	8c e2       	ldi	r24, 0x2C	; 44
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	f7 01       	movw	r30, r14
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	80 83       	st	Z, r24
     a4a:	07 e9       	ldi	r16, 0x97	; 151
     a4c:	12 e0       	ldi	r17, 0x02	; 2
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	f8 01       	movw	r30, r16
     a52:	80 83       	st	Z, r24
     a54:	c5 e9       	ldi	r28, 0x95	; 149
     a56:	d2 e0       	ldi	r29, 0x02	; 2
     a58:	19 82       	std	Y+1, r1	; 0x01
     a5a:	18 82       	st	Y, r1
     a5c:	42 de       	rcall	.-892    	; 0x6e2 <kernel_create_task>
     a5e:	89 e2       	ldi	r24, 0x29	; 41
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	f7 01       	movw	r30, r14
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
     a68:	f8 01       	movw	r30, r16
     a6a:	10 82       	st	Z, r1
     a6c:	19 82       	std	Y+1, r1	; 0x01
     a6e:	18 82       	st	Y, r1
     a70:	38 de       	rcall	.-912    	; 0x6e2 <kernel_create_task>
     a72:	d0 92 34 0c 	sts	0x0C34, r13
     a76:	c0 92 33 0c 	sts	0x0C33, r12
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 c6 03 	sts	0x03C6, r24
     a80:	89 e6       	ldi	r24, 0x69	; 105
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	17 de       	rcall	.-978    	; 0x6b4 <dequeue>
     a86:	ef e6       	ldi	r30, 0x6F	; 111
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	80 83       	st	Z, r24
     a90:	80 91 84 00 	lds	r24, 0x0084
     a94:	90 91 85 00 	lds	r25, 0x0085
     a98:	80 5f       	subi	r24, 0xF0	; 240
     a9a:	98 4d       	sbci	r25, 0xD8	; 216
     a9c:	90 93 89 00 	sts	0x0089, r25
     aa0:	80 93 88 00 	sts	0x0088, r24
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	86 bb       	out	0x16, r24	; 22
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	08 95       	ret

00000aba <OS_Abort>:
     aba:	f8 94       	cli
     abc:	80 e6       	ldi	r24, 0x60	; 96
     abe:	80 93 01 01 	sts	0x0101, r24
     ac2:	80 91 0e 02 	lds	r24, 0x020E
     ac6:	81 11       	cpse	r24, r1
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <OS_Abort+0x1a>
     aca:	30 91 0e 02 	lds	r19, 0x020E
     ace:	3f 5f       	subi	r19, 0xFF	; 255
     ad0:	40 e4       	ldi	r20, 0x40	; 64
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <OS_Abort+0x22>
     ad4:	30 91 0e 02 	lds	r19, 0x020E
     ad8:	31 50       	subi	r19, 0x01	; 1
     ada:	40 e2       	ldi	r20, 0x20	; 32
     adc:	e2 e0       	ldi	r30, 0x02	; 2
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	70 e6       	ldi	r23, 0x60	; 96
     ae2:	64 e6       	ldi	r22, 0x64	; 100
     ae4:	2a e0       	ldi	r18, 0x0A	; 10
     ae6:	54 e1       	ldi	r21, 0x14	; 20
     ae8:	70 83       	st	Z, r23
     aea:	86 2f       	mov	r24, r22
     aec:	9f e7       	ldi	r25, 0x7F	; 127
     aee:	a8 e3       	ldi	r26, 0x38	; 56
     af0:	b1 e0       	ldi	r27, 0x01	; 1
     af2:	91 50       	subi	r25, 0x01	; 1
     af4:	a0 40       	sbci	r26, 0x00	; 0
     af6:	b0 40       	sbci	r27, 0x00	; 0
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <OS_Abort+0x38>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <OS_Abort+0x42>
     afc:	00 00       	nop
     afe:	81 50       	subi	r24, 0x01	; 1
     b00:	a9 f7       	brne	.-22     	; 0xaec <OS_Abort+0x32>
     b02:	10 82       	st	Z, r1
     b04:	88 e2       	ldi	r24, 0x28	; 40
     b06:	cf e7       	ldi	r28, 0x7F	; 127
     b08:	98 e3       	ldi	r25, 0x38	; 56
     b0a:	a1 e0       	ldi	r26, 0x01	; 1
     b0c:	c1 50       	subi	r28, 0x01	; 1
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	a0 40       	sbci	r26, 0x00	; 0
     b12:	e1 f7       	brne	.-8      	; 0xb0c <OS_Abort+0x52>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <OS_Abort+0x5c>
     b16:	00 00       	nop
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	a9 f7       	brne	.-22     	; 0xb06 <OS_Abort+0x4c>
     b1c:	33 23       	and	r19, r19
     b1e:	59 f1       	breq	.+86     	; 0xb76 <OS_Abort+0xbc>
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	40 83       	st	Z, r20
     b24:	82 2f       	mov	r24, r18
     b26:	bf e7       	ldi	r27, 0x7F	; 127
     b28:	c8 e3       	ldi	r28, 0x38	; 56
     b2a:	a1 e0       	ldi	r26, 0x01	; 1
     b2c:	b1 50       	subi	r27, 0x01	; 1
     b2e:	c0 40       	sbci	r28, 0x00	; 0
     b30:	a0 40       	sbci	r26, 0x00	; 0
     b32:	e1 f7       	brne	.-8      	; 0xb2c <OS_Abort+0x72>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <OS_Abort+0x7c>
     b36:	00 00       	nop
     b38:	81 50       	subi	r24, 0x01	; 1
     b3a:	a9 f7       	brne	.-22     	; 0xb26 <OS_Abort+0x6c>
     b3c:	10 82       	st	Z, r1
     b3e:	82 2f       	mov	r24, r18
     b40:	bf e7       	ldi	r27, 0x7F	; 127
     b42:	c8 e3       	ldi	r28, 0x38	; 56
     b44:	a1 e0       	ldi	r26, 0x01	; 1
     b46:	b1 50       	subi	r27, 0x01	; 1
     b48:	c0 40       	sbci	r28, 0x00	; 0
     b4a:	a0 40       	sbci	r26, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <OS_Abort+0x8c>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <OS_Abort+0x96>
     b50:	00 00       	nop
     b52:	81 50       	subi	r24, 0x01	; 1
     b54:	a9 f7       	brne	.-22     	; 0xb40 <OS_Abort+0x86>
     b56:	9f 5f       	subi	r25, 0xFF	; 255
     b58:	93 13       	cpse	r25, r19
     b5a:	e3 cf       	rjmp	.-58     	; 0xb22 <OS_Abort+0x68>
     b5c:	0c c0       	rjmp	.+24     	; 0xb76 <OS_Abort+0xbc>
     b5e:	bf e7       	ldi	r27, 0x7F	; 127
     b60:	c8 e3       	ldi	r28, 0x38	; 56
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	b1 50       	subi	r27, 0x01	; 1
     b66:	c0 40       	sbci	r28, 0x00	; 0
     b68:	90 40       	sbci	r25, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <OS_Abort+0xaa>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <OS_Abort+0xb4>
     b6e:	00 00       	nop
     b70:	81 50       	subi	r24, 0x01	; 1
     b72:	a9 f7       	brne	.-22     	; 0xb5e <OS_Abort+0xa4>
     b74:	b9 cf       	rjmp	.-142    	; 0xae8 <OS_Abort+0x2e>
     b76:	85 2f       	mov	r24, r21
     b78:	f2 cf       	rjmp	.-28     	; 0xb5e <OS_Abort+0xa4>

00000b7a <periodic_task_ready>:
     b7a:	e0 91 6d 02 	lds	r30, 0x026D
     b7e:	f0 91 6e 02 	lds	r31, 0x026E
     b82:	30 97       	sbiw	r30, 0x00	; 0
     b84:	19 f1       	breq	.+70     	; 0xbcc <periodic_task_ready+0x52>
     b86:	80 91 6f 02 	lds	r24, 0x026F
     b8a:	90 91 70 02 	lds	r25, 0x0270
     b8e:	e8 17       	cp	r30, r24
     b90:	f9 07       	cpc	r31, r25
     b92:	79 f0       	breq	.+30     	; 0xbb2 <periodic_task_ready+0x38>
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	26 81       	ldd	r18, Z+6	; 0x06
     b9a:	37 81       	ldd	r19, Z+7	; 0x07
     b9c:	16 96       	adiw	r26, 0x06	; 6
     b9e:	8d 91       	ld	r24, X+
     ba0:	9c 91       	ld	r25, X
     ba2:	17 97       	sbiw	r26, 0x07	; 7
     ba4:	28 17       	cp	r18, r24
     ba6:	39 07       	cpc	r19, r25
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <periodic_task_ready+0x38>
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	80 93 0e 02 	sts	0x020E, r24
     bb0:	84 df       	rcall	.-248    	; 0xaba <OS_Abort>
     bb2:	20 91 16 02 	lds	r18, 0x0216
     bb6:	30 91 17 02 	lds	r19, 0x0217
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	46 81       	ldd	r20, Z+6	; 0x06
     bc0:	57 81       	ldd	r21, Z+7	; 0x07
     bc2:	42 17       	cp	r20, r18
     bc4:	53 07       	cpc	r21, r19
     bc6:	21 f0       	breq	.+8      	; 0xbd0 <periodic_task_ready+0x56>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	08 95       	ret

00000bd2 <kernel_should_preempt>:
     bd2:	80 91 87 02 	lds	r24, 0x0287
     bd6:	90 91 88 02 	lds	r25, 0x0288
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	71 f1       	breq	.+92     	; 0xc3a <kernel_should_preempt+0x68>
     bde:	80 91 69 02 	lds	r24, 0x0269
     be2:	90 91 6a 02 	lds	r25, 0x026A
     be6:	89 2b       	or	r24, r25
     be8:	49 f0       	breq	.+18     	; 0xbfc <kernel_should_preempt+0x2a>
     bea:	e0 91 33 0c 	lds	r30, 0x0C33
     bee:	f0 91 34 0c 	lds	r31, 0x0C34
     bf2:	ee 5f       	subi	r30, 0xFE	; 254
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	80 81       	ld	r24, Z
     bf8:	81 11       	cpse	r24, r1
     bfa:	22 c0       	rjmp	.+68     	; 0xc40 <kernel_should_preempt+0x6e>
     bfc:	be df       	rcall	.-132    	; 0xb7a <periodic_task_ready>
     bfe:	89 2b       	or	r24, r25
     c00:	49 f0       	breq	.+18     	; 0xc14 <kernel_should_preempt+0x42>
     c02:	e0 91 33 0c 	lds	r30, 0x0C33
     c06:	f0 91 34 0c 	lds	r31, 0x0C34
     c0a:	ee 5f       	subi	r30, 0xFE	; 254
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	80 81       	ld	r24, Z
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	cc f4       	brge	.+50     	; 0xc46 <kernel_should_preempt+0x74>
     c14:	80 91 71 02 	lds	r24, 0x0271
     c18:	90 91 72 02 	lds	r25, 0x0272
     c1c:	89 2b       	or	r24, r25
     c1e:	b1 f0       	breq	.+44     	; 0xc4c <kernel_should_preempt+0x7a>
     c20:	e0 91 33 0c 	lds	r30, 0x0C33
     c24:	f0 91 34 0c 	lds	r31, 0x0C34
     c28:	ee 5f       	subi	r30, 0xFE	; 254
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	20 81       	ld	r18, Z
     c32:	23 30       	cpi	r18, 0x03	; 3
     c34:	6c f4       	brge	.+26     	; 0xc50 <kernel_should_preempt+0x7e>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	08 95       	ret
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	08 95       	ret
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	08 95       	ret
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	08 95       	ret
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	08 95       	ret

00000c52 <main>:
 * The application layer must define r_main() for its entry point, 
 * and will be called after the OS is initialized. 
 */
int main()
{
    InitializeLogicAnalyzerProfiler();
     c52:	87 b1       	in	r24, 0x07	; 7
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	87 b9       	out	0x07, r24	; 7
    EnableProfileSample1();
     c58:	40 9a       	sbi	0x08, 0	; 8
	kernel_init();
     c5a:	64 de       	rcall	.-824    	; 0x924 <kernel_init>
    DisableProfileSample1();
     c5c:	40 98       	cbi	0x08, 0	; 8
static void kernel_dispatch(void)
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */
    if (cur_task == NULL)
     c5e:	80 91 33 0c 	lds	r24, 0x0C33
     c62:	90 91 34 0c 	lds	r25, 0x0C34
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	21 f4       	brne	.+8      	; 0xc72 <main+0x20>
    {
		error_msg = ERR_RUN_7_RTOS_INTERNAL_ERROR;
     c6a:	88 e0       	ldi	r24, 0x08	; 8
     c6c:	80 93 0e 02 	sts	0x020E, r24
		OS_Abort();
     c70:	24 df       	rcall	.-440    	; 0xaba <OS_Abort>
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
    {
		if(system_task_queue.head != NULL)
     c72:	c9 e6       	ldi	r28, 0x69	; 105
     c74:	d2 e0       	ldi	r29, 0x02	; 2
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }
        cur_task->state = RUNNING;
     c76:	77 24       	eor	r7, r7
     c78:	73 94       	inc	r7
			cur_per_metadata = periodic_dequeue(&periodic_task_queue);
            cur_task = cur_per_metadata->task;
			periodic_task_remticks = cur_per_metadata->wcet;
        }
		//Else if, use the time to complete round robin. 
        else if(roundrobin_task_queue.head != NULL)
     c7a:	0f 2e       	mov	r0, r31
     c7c:	f1 e7       	ldi	r31, 0x71	; 113
     c7e:	ef 2e       	mov	r14, r31
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	ff 2e       	mov	r15, r31
     c84:	f0 2d       	mov	r31, r0
            cur_task = (task_descriptor_t*)dequeue(&roundrobin_task_queue);
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     c86:	0f 2e       	mov	r0, r31
     c88:	f1 e2       	ldi	r31, 0x21	; 33
     c8a:	4f 2e       	mov	r4, r31
     c8c:	fb e0       	ldi	r31, 0x0B	; 11
     c8e:	5f 2e       	mov	r5, r31
     c90:	f0 2d       	mov	r31, r0
 *
 * @return The available metadata, or NULL if none available. 
 */
static periodic_task_metadata_t* periodic_dequeue(periodic_task_queue_t* queue_ptr)
{
	periodic_task_metadata_t* task_ptr = queue_ptr->head;
     c92:	0f 2e       	mov	r0, r31
     c94:	fd e6       	ldi	r31, 0x6D	; 109
     c96:	af 2e       	mov	r10, r31
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	bf 2e       	mov	r11, r31
     c9c:	f0 2d       	mov	r31, r0

	//If queue is not empty.
	if(queue_ptr->head != NULL)
	{
		if(queue_ptr->head == queue_ptr->tail)
     c9e:	0f 2e       	mov	r0, r31
     ca0:	ff e6       	ldi	r31, 0x6F	; 111
     ca2:	8f 2e       	mov	r8, r31
     ca4:	f2 e0       	ldi	r31, 0x02	; 2
     ca6:	9f 2e       	mov	r9, r31
     ca8:	f0 2d       	mov	r31, r0
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
        {
            t = (task_descriptor_t *) dequeue(&(s->task_queue));
			*(t->data) = (int16_t) kernel_request_service_pub_data; 
            t->state = READY;
     caa:	68 94       	set
     cac:	66 24       	eor	r6, r6
     cae:	61 f8       	bld	r6, 1

static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
	{
		queue_ptr->head = queue_ptr->tail = to_add;
     cb0:	0f 2e       	mov	r0, r31
     cb2:	f3 e7       	ldi	r31, 0x73	; 115
     cb4:	2f 2e       	mov	r2, r31
     cb6:	f2 e0       	ldi	r31, 0x02	; 2
     cb8:	3f 2e       	mov	r3, r31
     cba:	f0 2d       	mov	r31, r0
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */
	
	ticks_from_start += 1;
    current_timer_val = TCNT1;
     cbc:	0f 2e       	mov	r0, r31
     cbe:	f4 e8       	ldi	r31, 0x84	; 132
     cc0:	cf 2e       	mov	r12, r31
     cc2:	d1 2c       	mov	r13, r1
     cc4:	f0 2d       	mov	r31, r0
    {
		error_msg = ERR_RUN_7_RTOS_INTERNAL_ERROR;
		OS_Abort();
        return;
    }
    if(cur_task->state != RUNNING || (cur_task == idle_task && !kernel_preemption_disabled))
     cc6:	fc 01       	movw	r30, r24
     cc8:	eb 5f       	subi	r30, 0xFB	; 251
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	20 81       	ld	r18, Z
     cce:	21 30       	cpi	r18, 0x01	; 1
     cd0:	59 f4       	brne	.+22     	; 0xce8 <main+0x96>
     cd2:	81 52       	subi	r24, 0x21	; 33
     cd4:	9b 40       	sbci	r25, 0x0B	; 11
     cd6:	09 f0       	breq	.+2      	; 0xcda <main+0x88>
     cd8:	54 c0       	rjmp	.+168    	; 0xd82 <main+0x130>
     cda:	80 91 87 02 	lds	r24, 0x0287
     cde:	90 91 88 02 	lds	r25, 0x0288
     ce2:	89 2b       	or	r24, r25
     ce4:	09 f0       	breq	.+2      	; 0xce8 <main+0x96>
     ce6:	4d c0       	rjmp	.+154    	; 0xd82 <main+0x130>
    {
		if(system_task_queue.head != NULL)
     ce8:	88 81       	ld	r24, Y
     cea:	99 81       	ldd	r25, Y+1	; 0x01
     cec:	89 2b       	or	r24, r25
     cee:	39 f0       	breq	.+14     	; 0xcfe <main+0xac>
        {
            cur_task = (task_descriptor_t*)dequeue(&system_task_queue);
     cf0:	ce 01       	movw	r24, r28
     cf2:	e0 dc       	rcall	.-1600   	; 0x6b4 <dequeue>
     cf4:	90 93 34 0c 	sts	0x0C34, r25
     cf8:	80 93 33 0c 	sts	0x0C33, r24
     cfc:	3b c0       	rjmp	.+118    	; 0xd74 <main+0x122>
        }
		//Else if a period tasks is ready...
        else if(periodic_task_ready())
     cfe:	3d df       	rcall	.-390    	; 0xb7a <periodic_task_ready>
     d00:	89 2b       	or	r24, r25
     d02:	41 f1       	breq	.+80     	; 0xd54 <main+0x102>
 *
 * @return The available metadata, or NULL if none available. 
 */
static periodic_task_metadata_t* periodic_dequeue(periodic_task_queue_t* queue_ptr)
{
	periodic_task_metadata_t* task_ptr = queue_ptr->head;
     d04:	d5 01       	movw	r26, r10
     d06:	ed 91       	ld	r30, X+
     d08:	fc 91       	ld	r31, X

	//If queue is not empty.
	if(queue_ptr->head != NULL)
     d0a:	30 97       	sbiw	r30, 0x00	; 0
     d0c:	91 f0       	breq	.+36     	; 0xd32 <main+0xe0>
	{
		if(queue_ptr->head == queue_ptr->tail)
     d0e:	d4 01       	movw	r26, r8
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	e8 17       	cp	r30, r24
     d18:	f9 07       	cpc	r31, r25
     d1a:	31 f4       	brne	.+12     	; 0xd28 <main+0xd6>
		{
			//Last item in the queue.
			queue_ptr->head = queue_ptr->tail = NULL;
     d1c:	1d 92       	st	X+, r1
     d1e:	1c 92       	st	X, r1
     d20:	d5 01       	movw	r26, r10
     d22:	1d 92       	st	X+, r1
     d24:	1c 92       	st	X, r1
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <main+0xe0>
		}
		else
		{
			queue_ptr->head = queue_ptr->head->nextT;
     d28:	80 85       	ldd	r24, Z+8	; 0x08
     d2a:	91 85       	ldd	r25, Z+9	; 0x09
     d2c:	d5 01       	movw	r26, r10
     d2e:	8d 93       	st	X+, r24
     d30:	9c 93       	st	X, r25
        }
		//Else if a period tasks is ready...
        else if(periodic_task_ready())
        {
            /* Keep running the current PERIODIC task. */
			cur_per_metadata = periodic_dequeue(&periodic_task_queue);
     d32:	f0 93 32 0c 	sts	0x0C32, r31
     d36:	e0 93 31 0c 	sts	0x0C31, r30
            cur_task = cur_per_metadata->task;
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	90 93 34 0c 	sts	0x0C34, r25
     d42:	80 93 33 0c 	sts	0x0C33, r24
			periodic_task_remticks = cur_per_metadata->wcet;
     d46:	84 81       	ldd	r24, Z+4	; 0x04
     d48:	95 81       	ldd	r25, Z+5	; 0x05
     d4a:	90 93 30 0c 	sts	0x0C30, r25
     d4e:	80 93 2f 0c 	sts	0x0C2F, r24
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <main+0x122>
        }
		//Else if, use the time to complete round robin. 
        else if(roundrobin_task_queue.head != NULL)
     d54:	f7 01       	movw	r30, r14
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	89 2b       	or	r24, r25
     d5c:	39 f0       	breq	.+14     	; 0xd6c <main+0x11a>
        {
            cur_task = (task_descriptor_t*)dequeue(&roundrobin_task_queue);
     d5e:	c7 01       	movw	r24, r14
     d60:	a9 dc       	rcall	.-1710   	; 0x6b4 <dequeue>
     d62:	90 93 34 0c 	sts	0x0C34, r25
     d66:	80 93 33 0c 	sts	0x0C33, r24
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <main+0x122>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     d6c:	50 92 34 0c 	sts	0x0C34, r5
     d70:	40 92 33 0c 	sts	0x0C33, r4
        }
        cur_task->state = RUNNING;
     d74:	e0 91 33 0c 	lds	r30, 0x0C33
     d78:	f0 91 34 0c 	lds	r31, 0x0C34
     d7c:	eb 5f       	subi	r30, 0xFB	; 251
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	70 82       	st	Z, r7
static void kernel_main_loop(void)
{
    for(;;)
    {
        kernel_dispatch();
		kernel_preemption_disabled = 0; //Disable it after each call to OS
     d82:	10 92 88 02 	sts	0x0288, r1
     d86:	10 92 87 02 	sts	0x0287, r1
        exit_kernel();
     d8a:	67 db       	rcall	.-2354   	; 0x45a <exit_kernel>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waiting queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
     d8c:	80 91 98 02 	lds	r24, 0x0298
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	89 30       	cpi	r24, 0x09	; 9
     d94:	91 05       	cpc	r25, r1
     d96:	08 f0       	brcs	.+2      	; 0xd9a <main+0x148>
     d98:	8b c1       	rjmp	.+790    	; 0x10b0 <main+0x45e>
     d9a:	fc 01       	movw	r30, r24
     d9c:	ee 58       	subi	r30, 0x8E	; 142
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	bb c1       	rjmp	.+886    	; 0x1118 <__tablejump2__>
 */
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */
	
	ticks_from_start += 1;
     da2:	80 91 16 02 	lds	r24, 0x0216
     da6:	90 91 17 02 	lds	r25, 0x0217
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	90 93 17 02 	sts	0x0217, r25
     db0:	80 93 16 02 	sts	0x0216, r24
    current_timer_val = TCNT1;
     db4:	d6 01       	movw	r26, r12
     db6:	8d 91       	ld	r24, X+
     db8:	9c 91       	ld	r25, X
     dba:	90 93 15 02 	sts	0x0215, r25
     dbe:	80 93 14 02 	sts	0x0214, r24
	
    if(cur_task->priority == PERIODIC)
     dc2:	60 91 33 0c 	lds	r22, 0x0C33
     dc6:	70 91 34 0c 	lds	r23, 0x0C34
     dca:	fb 01       	movw	r30, r22
     dcc:	ee 5f       	subi	r30, 0xFE	; 254
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	80 81       	ld	r24, Z
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	81 f4       	brne	.+32     	; 0xdf6 <main+0x1a4>
    {
		periodic_task_remticks--;
     dd6:	80 91 2f 0c 	lds	r24, 0x0C2F
     dda:	90 91 30 0c 	lds	r25, 0x0C30
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	90 93 30 0c 	sts	0x0C30, r25
     de4:	80 93 2f 0c 	sts	0x0C2F, r24
        if(periodic_task_remticks == 0)
     de8:	89 2b       	or	r24, r25
     dea:	09 f0       	breq	.+2      	; 0xdee <main+0x19c>
     dec:	65 c1       	rjmp	.+714    	; 0x10b8 <main+0x466>
        {
			error_msg = ERR_RUN_4_PERIODIC_TOOK_TOO_LONG;
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	80 93 0e 02 	sts	0x020E, r24
			OS_Abort();
     df4:	62 de       	rcall	.-828    	; 0xaba <OS_Abort>

    case TIMER_EXPIRED:
        kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->priority == ROUND_ROBIN && cur_task->state == RUNNING)
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	09 f0       	breq	.+2      	; 0xdfc <main+0x1aa>
     dfa:	5e c1       	rjmp	.+700    	; 0x10b8 <main+0x466>
     dfc:	fb 01       	movw	r30, r22
     dfe:	eb 5f       	subi	r30, 0xFB	; 251
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	80 81       	ld	r24, Z
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	09 f0       	breq	.+2      	; 0xe0a <main+0x1b8>
     e08:	57 c1       	rjmp	.+686    	; 0x10b8 <main+0x466>
        {
            cur_task->state = READY;
     e0a:	60 82       	st	Z, r6
            enqueue(&roundrobin_task_queue, cur_task);
     e0c:	c7 01       	movw	r24, r14
     e0e:	3f dc       	rcall	.-1922   	; 0x68e <enqueue>
     e10:	53 c1       	rjmp	.+678    	; 0x10b8 <main+0x466>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
     e12:	67 dc       	rcall	.-1842   	; 0x6e2 <kernel_create_task>
     e14:	90 93 86 02 	sts	0x0286, r25
     e18:	80 93 85 02 	sts	0x0285, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */

        if(!kernel_request_retval && kernel_should_preempt())
     e1c:	80 91 85 02 	lds	r24, 0x0285
     e20:	90 91 86 02 	lds	r25, 0x0286
     e24:	89 2b       	or	r24, r25
     e26:	a1 f5       	brne	.+104    	; 0xe90 <main+0x23e>
     e28:	d4 de       	rcall	.-600    	; 0xbd2 <kernel_should_preempt>
     e2a:	89 2b       	or	r24, r25
     e2c:	89 f1       	breq	.+98     	; 0xe90 <main+0x23e>
        {
			cur_task->state = READY;
     e2e:	80 91 33 0c 	lds	r24, 0x0C33
     e32:	90 91 34 0c 	lds	r25, 0x0C34
     e36:	fc 01       	movw	r30, r24
     e38:	eb 5f       	subi	r30, 0xFB	; 251
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
     e3c:	60 82       	st	Z, r6
			//If we have been paused and are round robin, enqueue at the front
			//to run next time.
            if(cur_task->priority == ROUND_ROBIN)
     e3e:	33 97       	sbiw	r30, 0x03	; 3
     e40:	20 81       	ld	r18, Z
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	d1 f4       	brne	.+52     	; 0xe7a <main+0x228>
}


static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
     e46:	f7 01       	movw	r30, r14
     e48:	20 81       	ld	r18, Z
     e4a:	31 81       	ldd	r19, Z+1	; 0x01
     e4c:	21 15       	cp	r18, r1
     e4e:	31 05       	cpc	r19, r1
     e50:	59 f4       	brne	.+22     	; 0xe68 <main+0x216>
	{
		queue_ptr->head = queue_ptr->tail = to_add;
     e52:	d1 01       	movw	r26, r2
     e54:	8d 93       	st	X+, r24
     e56:	9c 93       	st	X, r25
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
		to_add->next = NULL;
     e5c:	fc 01       	movw	r30, r24
     e5e:	e6 5f       	subi	r30, 0xF6	; 246
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
     e66:	28 c1       	rjmp	.+592    	; 0x10b8 <main+0x466>
	}
	else
	{
		to_add->next = queue_ptr->head;
     e68:	fc 01       	movw	r30, r24
     e6a:	e6 5f       	subi	r30, 0xF6	; 246
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	20 83       	st	Z, r18
		queue_ptr->head = to_add;
     e72:	f7 01       	movw	r30, r14
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	80 83       	st	Z, r24
     e78:	1f c1       	rjmp	.+574    	; 0x10b8 <main+0x466>
			//to run next time.
            if(cur_task->priority == ROUND_ROBIN)
            {
                budgequeue(&roundrobin_task_queue, cur_task);
            }
			else if(cur_task->priority == PERIODIC)
     e7a:	21 30       	cpi	r18, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <main+0x22e>
     e7e:	1c c1       	rjmp	.+568    	; 0x10b8 <main+0x466>
			{
				//If we are a periodic which as been pre-empted, place us back in the
				//waiting queue without updating our next stamp, so we remain at the front.
				periodic_enqueue(&periodic_task_queue, cur_task->periodic_desc);
     e80:	fc 01       	movw	r30, r24
     e82:	ed 5f       	subi	r30, 0xFD	; 253
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	c5 01       	movw	r24, r10
     e8c:	98 db       	rcall	.-2256   	; 0x5be <periodic_enqueue>
     e8e:	14 c1       	rjmp	.+552    	; 0x10b8 <main+0x466>
			}
        }
		else if(kernel_request_retval == 1)
     e90:	80 91 85 02 	lds	r24, 0x0285
     e94:	90 91 86 02 	lds	r25, 0x0286
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	21 f4       	brne	.+8      	; 0xea4 <main+0x252>
		{
			//Too many tasks. 
			error_msg = ERR_RUN_1_TOO_MANY_TASKS;
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	80 93 0e 02 	sts	0x020E, r24
			OS_Abort();
     ea2:	0b de       	rcall	.-1002   	; 0xaba <OS_Abort>
			
		}
		else if(kernel_request_retval == 2)
     ea4:	80 91 85 02 	lds	r24, 0x0285
     ea8:	90 91 86 02 	lds	r25, 0x0286
     eac:	02 97       	sbiw	r24, 0x02	; 2
     eae:	09 f0       	breq	.+2      	; 0xeb2 <main+0x260>
     eb0:	03 c1       	rjmp	.+518    	; 0x10b8 <main+0x466>
		{
			//Too many periodic tasks. 
			error_msg = ERR_RUN_2_TOO_MANY_PERIODIC_TASKS;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	80 93 0e 02 	sts	0x020E, r24
			OS_Abort();
     eb8:	00 de       	rcall	.-1024   	; 0xaba <OS_Abort>
		}
		
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
     eba:	00 91 33 0c 	lds	r16, 0x0C33
     ebe:	10 91 34 0c 	lds	r17, 0x0C34
     ec2:	fb e0       	ldi	r31, 0x0B	; 11
     ec4:	01 32       	cpi	r16, 0x21	; 33
     ec6:	1f 07       	cpc	r17, r31
     ec8:	09 f4       	brne	.+2      	; 0xecc <main+0x27a>
     eca:	f6 c0       	rjmp	.+492    	; 0x10b8 <main+0x466>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
     ecc:	f8 01       	movw	r30, r16
     ece:	eb 5f       	subi	r30, 0xFB	; 251
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	10 82       	st	Z, r1
    if(cur_task->priority == PERIODIC && cur_task->periodic_desc != NULL)
     ed4:	33 97       	sbiw	r30, 0x03	; 3
     ed6:	80 81       	ld	r24, Z
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	81 f4       	brne	.+32     	; 0xefc <main+0x2aa>
     edc:	31 96       	adiw	r30, 0x01	; 1
     ede:	01 90       	ld	r0, Z+
     ee0:	f0 81       	ld	r31, Z
     ee2:	e0 2d       	mov	r30, r0
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	51 f0       	breq	.+20     	; 0xefc <main+0x2aa>
    {
		//TODO: Remove from our construct. 
		cur_task->periodic_desc->task = NULL;
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	10 82       	st	Z, r1
		periodic_enqueue(&periodic_dead_pool_queue, cur_task->periodic_desc);
     eec:	f8 01       	movw	r30, r16
     eee:	ed 5f       	subi	r30, 0xFD	; 253
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	85 e7       	ldi	r24, 0x75	; 117
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	61 db       	rcall	.-2366   	; 0x5be <periodic_enqueue>
    }
    enqueue(&dead_pool_queue, cur_task);
     efc:	b8 01       	movw	r22, r16
     efe:	89 e7       	ldi	r24, 0x79	; 121
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	c5 db       	rcall	.-2166   	; 0x68e <enqueue>
     f04:	d9 c0       	rjmp	.+434    	; 0x10b8 <main+0x466>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		cur_task->state = READY;
     f06:	60 91 33 0c 	lds	r22, 0x0C33
     f0a:	70 91 34 0c 	lds	r23, 0x0C34
     f0e:	fb 01       	movw	r30, r22
     f10:	eb 5f       	subi	r30, 0xFB	; 251
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	60 82       	st	Z, r6
		switch(cur_task->priority)
     f16:	33 97       	sbiw	r30, 0x03	; 3
     f18:	80 81       	ld	r24, Z
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	39 f0       	breq	.+14     	; 0xf2c <main+0x2da>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	a9 f0       	breq	.+42     	; 0xf4c <main+0x2fa>
     f22:	81 11       	cpse	r24, r1
     f24:	c9 c0       	rjmp	.+402    	; 0x10b8 <main+0x466>
		{
			case SYSTEM:
				enqueue(&system_task_queue, cur_task);
     f26:	ce 01       	movw	r24, r28
     f28:	b2 db       	rcall	.-2204   	; 0x68e <enqueue>
     f2a:	c6 c0       	rjmp	.+396    	; 0x10b8 <main+0x466>
				break;

			case PERIODIC:	
				//If we did execute in time 	
				cur_per_metadata->next += cur_per_metadata->period;
     f2c:	e0 91 31 0c 	lds	r30, 0x0C31
     f30:	f0 91 32 0c 	lds	r31, 0x0C32
     f34:	26 81       	ldd	r18, Z+6	; 0x06
     f36:	37 81       	ldd	r19, Z+7	; 0x07
     f38:	82 81       	ldd	r24, Z+2	; 0x02
     f3a:	93 81       	ldd	r25, Z+3	; 0x03
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	97 83       	std	Z+7, r25	; 0x07
     f42:	86 83       	std	Z+6, r24	; 0x06
				periodic_enqueue(&periodic_task_queue, cur_per_metadata);
     f44:	bf 01       	movw	r22, r30
     f46:	c5 01       	movw	r24, r10
     f48:	3a db       	rcall	.-2444   	; 0x5be <periodic_enqueue>
     f4a:	b6 c0       	rjmp	.+364    	; 0x10b8 <main+0x466>
				break;

			case ROUND_ROBIN:
				//If the task calls Task_Next() it is yielding, and is moved to the back.
				enqueue(&roundrobin_task_queue, cur_task);
     f4c:	c7 01       	movw	r24, r14
     f4e:	9f db       	rcall	.-2242   	; 0x68e <enqueue>
     f50:	b3 c0       	rjmp	.+358    	; 0x10b8 <main+0x466>
 * kernel_request_service_init_retval pointer. Set the
 * pointer to 0 to imply a failure
 */
static void kernel_service_init()
{
	if (num_services < MAXSERVICES)
     f52:	20 91 18 02 	lds	r18, 0x0218
     f56:	2a 30       	cpi	r18, 0x0A	; 10
     f58:	70 f4       	brcc	.+28     	; 0xf76 <main+0x324>
	{
		kernel_request_service_init_retval = &(service_list[num_services]);
     f5a:	38 e0       	ldi	r19, 0x08	; 8
     f5c:	23 9f       	mul	r18, r19
     f5e:	c0 01       	movw	r24, r0
     f60:	11 24       	eor	r1, r1
     f62:	87 5e       	subi	r24, 0xE7	; 231
     f64:	9d 4f       	sbci	r25, 0xFD	; 253
     f66:	90 93 84 02 	sts	0x0284, r25
     f6a:	80 93 83 02 	sts	0x0283, r24
		num_services += 1;
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	20 93 18 02 	sts	0x0218, r18
     f74:	a1 c0       	rjmp	.+322    	; 0x10b8 <main+0x466>
	}
	else
	{
		error_msg = ERR_RUN_8_SERVICE_CAPACITY_REACHED;
     f76:	89 e0       	ldi	r24, 0x09	; 9
     f78:	80 93 0e 02 	sts	0x020E, r24
		OS_Abort();
     f7c:	9e dd       	rcall	.-1220   	; 0xaba <OS_Abort>
/**
 * Subscribe a task to a given service
 */
static void kernel_service_sub()
{
	if (kernel_request_service_descriptor == NULL)
     f7e:	80 91 81 02 	lds	r24, 0x0281
     f82:	90 91 82 02 	lds	r25, 0x0282
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	21 f4       	brne	.+8      	; 0xf92 <main+0x340>
	{
		error_msg = ERR_RUN_9_INVALID_SERVICE;
     f8a:	8a e0       	ldi	r24, 0x0A	; 10
     f8c:	80 93 0e 02 	sts	0x020E, r24
        OS_Abort();
     f90:	94 dd       	rcall	.-1240   	; 0xaba <OS_Abort>
	}
    else if (cur_task->priority == PERIODIC)
     f92:	00 91 33 0c 	lds	r16, 0x0C33
     f96:	10 91 34 0c 	lds	r17, 0x0C34
     f9a:	f8 01       	movw	r30, r16
     f9c:	ee 5f       	subi	r30, 0xFE	; 254
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	20 81       	ld	r18, Z
     fa2:	21 30       	cpi	r18, 0x01	; 1
     fa4:	21 f4       	brne	.+8      	; 0xfae <main+0x35c>
    {
        error_msg = ERR_RUN_10_PERIODIC_SUBSCRIBE;
     fa6:	8b e0       	ldi	r24, 0x0B	; 11
     fa8:	80 93 0e 02 	sts	0x020E, r24
        OS_Abort();
     fac:	86 dd       	rcall	.-1268   	; 0xaba <OS_Abort>
    }
    else
    {
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;
        cur_task->data = (int16_t *) kernel_request_service_sub_data;
     fae:	f8 01       	movw	r30, r16
     fb0:	e8 5f       	subi	r30, 0xF8	; 248
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	20 91 7f 02 	lds	r18, 0x027F
     fb8:	30 91 80 02 	lds	r19, 0x0280
     fbc:	31 83       	std	Z+1, r19	; 0x01
     fbe:	20 83       	st	Z, r18
	    enqueue(&(s->task_queue), cur_task);
     fc0:	b8 01       	movw	r22, r16
     fc2:	65 db       	rcall	.-2358   	; 0x68e <enqueue>
        
        // Block the task until someone publishes to the service 
        cur_task->state = WAITING;
     fc4:	f8 01       	movw	r30, r16
     fc6:	eb 5f       	subi	r30, 0xFB	; 251
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	80 83       	st	Z, r24
     fce:	74 c0       	rjmp	.+232    	; 0x10b8 <main+0x466>
/**
 * Publish a value to a service
 */ 
static void kernel_service_pub()
{
	if (kernel_request_service_descriptor == NULL)
     fd0:	00 91 81 02 	lds	r16, 0x0281
     fd4:	10 91 82 02 	lds	r17, 0x0282
     fd8:	01 15       	cp	r16, r1
     fda:	11 05       	cpc	r17, r1
     fdc:	71 f5       	brne	.+92     	; 0x103a <main+0x3e8>
	{
    	error_msg = ERR_RUN_9_INVALID_SERVICE;
     fde:	8a e0       	ldi	r24, 0x0A	; 10
     fe0:	80 93 0e 02 	sts	0x020E, r24
    	OS_Abort();
     fe4:	6a dd       	rcall	.-1324   	; 0xaba <OS_Abort>

        // Release the tasks! TODO: Place them in the expected ready queues
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
        {
            t = (task_descriptor_t *) dequeue(&(s->task_queue));
     fe6:	c8 01       	movw	r24, r16
     fe8:	65 db       	rcall	.-2358   	; 0x6b4 <dequeue>
			*(t->data) = (int16_t) kernel_request_service_pub_data; 
     fea:	fc 01       	movw	r30, r24
     fec:	e8 5f       	subi	r30, 0xF8	; 248
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	01 90       	ld	r0, Z+
     ff2:	f0 81       	ld	r31, Z
     ff4:	e0 2d       	mov	r30, r0
     ff6:	20 91 7d 02 	lds	r18, 0x027D
     ffa:	30 91 7e 02 	lds	r19, 0x027E
     ffe:	31 83       	std	Z+1, r19	; 0x01
    1000:	20 83       	st	Z, r18
            t->state = READY;
    1002:	fc 01       	movw	r30, r24
    1004:	eb 5f       	subi	r30, 0xFB	; 251
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	60 82       	st	Z, r6
            switch(t->priority)
    100a:	33 97       	sbiw	r30, 0x03	; 3
    100c:	20 81       	ld	r18, Z
    100e:	21 30       	cpi	r18, 0x01	; 1
    1010:	41 f0       	breq	.+16     	; 0x1022 <main+0x3d0>
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	51 f0       	breq	.+20     	; 0x102a <main+0x3d8>
    1016:	21 11       	cpse	r18, r1
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <main+0x3e0>
            {
                case SYSTEM:
                    enqueue(&system_task_queue, t);
    101a:	bc 01       	movw	r22, r24
    101c:	ce 01       	movw	r24, r28
    101e:	37 db       	rcall	.-2450   	; 0x68e <enqueue>
    1020:	0c c0       	rjmp	.+24     	; 0x103a <main+0x3e8>
                    break;
                case PERIODIC:
                    // This should have never happened. Error out
                    error_msg = ERR_RUN_11_PERIODIC_FOUND_WHEN_PUBLISHING;
    1022:	8c e0       	ldi	r24, 0x0C	; 12
    1024:	80 93 0e 02 	sts	0x020E, r24
                    OS_Abort();
    1028:	48 dd       	rcall	.-1392   	; 0xaba <OS_Abort>
                    break;
                case ROUND_ROBIN:
                    enqueue(&roundrobin_task_queue, t);
    102a:	bc 01       	movw	r22, r24
    102c:	c7 01       	movw	r24, r14
    102e:	2f db       	rcall	.-2466   	; 0x68e <enqueue>
    1030:	04 c0       	rjmp	.+8      	; 0x103a <main+0x3e8>
                    break;
                default:
                    error_msg = ERR_RUN_12_TASK_WITHOUT_PRIORITY;
    1032:	8d e0       	ldi	r24, 0x0D	; 13
    1034:	80 93 0e 02 	sts	0x020E, r24
                    OS_Abort();
    1038:	40 dd       	rcall	.-1408   	; 0xaba <OS_Abort>
    {
        SERVICE * s = (SERVICE *) kernel_request_service_descriptor;

        // Release the tasks! TODO: Place them in the expected ready queues
        task_descriptor_t * t = NULL;
        while (s->task_queue.head != NULL)
    103a:	d8 01       	movw	r26, r16
    103c:	8d 91       	ld	r24, X+
    103e:	9c 91       	ld	r25, X
    1040:	89 2b       	or	r24, r25
    1042:	89 f6       	brne	.-94     	; 0xfe6 <main+0x394>
        kernel_service_sub();
        break;

    case SERVICE_PUB:
        kernel_service_pub();
		if(kernel_should_preempt())
    1044:	c6 dd       	rcall	.-1140   	; 0xbd2 <kernel_should_preempt>
    1046:	89 2b       	or	r24, r25
    1048:	b9 f1       	breq	.+110    	; 0x10b8 <main+0x466>
		{
			cur_task->state = READY;
    104a:	60 91 33 0c 	lds	r22, 0x0C33
    104e:	70 91 34 0c 	lds	r23, 0x0C34
    1052:	fb 01       	movw	r30, r22
    1054:	eb 5f       	subi	r30, 0xFB	; 251
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	60 82       	st	Z, r6
			switch(cur_task->priority)
    105a:	33 97       	sbiw	r30, 0x03	; 3
    105c:	80 81       	ld	r24, Z
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	39 f0       	breq	.+14     	; 0x1070 <main+0x41e>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	61 f0       	breq	.+24     	; 0x107e <main+0x42c>
    1066:	81 11       	cpse	r24, r1
    1068:	27 c0       	rjmp	.+78     	; 0x10b8 <main+0x466>
			{
				case SYSTEM:
				enqueue(&system_task_queue, cur_task);
    106a:	ce 01       	movw	r24, r28
    106c:	10 db       	rcall	.-2528   	; 0x68e <enqueue>
    106e:	24 c0       	rjmp	.+72     	; 0x10b8 <main+0x466>
				break;

				case PERIODIC:
				//Assume we did not finish out run. 
				periodic_enqueue(&periodic_task_queue, cur_per_metadata);
    1070:	60 91 31 0c 	lds	r22, 0x0C31
    1074:	70 91 32 0c 	lds	r23, 0x0C32
    1078:	c5 01       	movw	r24, r10
    107a:	a1 da       	rcall	.-2750   	; 0x5be <periodic_enqueue>
    107c:	1d c0       	rjmp	.+58     	; 0x10b8 <main+0x466>
}


static void budgequeue(task_queue_t* queue_ptr, task_descriptor_t* to_add)
{
	if(queue_ptr->head == NULL)
    107e:	f7 01       	movw	r30, r14
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	59 f4       	brne	.+22     	; 0x109e <main+0x44c>
	{
		queue_ptr->head = queue_ptr->tail = to_add;
    1088:	d1 01       	movw	r26, r2
    108a:	6d 93       	st	X+, r22
    108c:	7c 93       	st	X, r23
    108e:	71 83       	std	Z+1, r23	; 0x01
    1090:	60 83       	st	Z, r22
		to_add->next = NULL;
    1092:	fb 01       	movw	r30, r22
    1094:	e6 5f       	subi	r30, 0xF6	; 246
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	10 82       	st	Z, r1
    109c:	0d c0       	rjmp	.+26     	; 0x10b8 <main+0x466>
	}
	else
	{
		to_add->next = queue_ptr->head;
    109e:	fb 01       	movw	r30, r22
    10a0:	e6 5f       	subi	r30, 0xF6	; 246
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
		queue_ptr->head = to_add;
    10a8:	f7 01       	movw	r30, r14
    10aa:	71 83       	std	Z+1, r23	; 0x01
    10ac:	60 83       	st	Z, r22
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <main+0x466>
		}
        break;

    default:
        /* Should never happen */
        error_msg = 2; // TODO: FIXME //ERR_RUN_8_RTOS_INTERNAL_ERROR;
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	80 93 0e 02 	sts	0x020E, r24
        OS_Abort();
    10b6:	01 dd       	rcall	.-1534   	; 0xaba <OS_Abort>
        break;
    }

    kernel_request = NONE;
    10b8:	10 92 98 02 	sts	0x0298, r1
static void kernel_dispatch(void)
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */
    if (cur_task == NULL)
    10bc:	80 91 33 0c 	lds	r24, 0x0C33
    10c0:	90 91 34 0c 	lds	r25, 0x0C34
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	09 f0       	breq	.+2      	; 0x10ca <main+0x478>
    10c8:	fe cd       	rjmp	.-1028   	; 0xcc6 <main+0x74>
    10ca:	cf cd       	rjmp	.-1122   	; 0xc6a <main+0x18>

000010cc <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	0b b6       	in	r0, 0x3b	; 59
    10d8:	0f 92       	push	r0
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
	// FEn - frame error
	// DORn - data overrun
	// UPEn - uart pairty error

    uart_buffer[uart_buffer_index] = UDR1;
    10e2:	e0 91 35 0c 	lds	r30, 0x0C35
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 91 ce 00 	lds	r24, 0x00CE
    10ec:	ea 5c       	subi	r30, 0xCA	; 202
    10ee:	f3 4f       	sbci	r31, 0xF3	; 243
    10f0:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    10f2:	80 91 35 0c 	lds	r24, 0x0C35
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	8f 71       	andi	r24, 0x1F	; 31
    10fc:	90 78       	andi	r25, 0x80	; 128
    10fe:	80 93 35 0c 	sts	0x0C35, r24
}
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	0f 90       	pop	r0
    110c:	0b be       	out	0x3b, r0	; 59
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <__tablejump2__>:
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31

0000111c <__tablejump__>:
    111c:	05 90       	lpm	r0, Z+
    111e:	f4 91       	lpm	r31, Z
    1120:	e0 2d       	mov	r30, r0
    1122:	19 94       	eijmp

00001124 <_exit>:
    1124:	f8 94       	cli

00001126 <__stop_program>:
    1126:	ff cf       	rjmp	.-2      	; 0x1126 <__stop_program>
